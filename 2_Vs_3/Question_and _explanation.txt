The fight for the best number in the globe is going to finally come to an end.The top two contenders for the best number are number 2 and number 3.
It's the final the entire world was waiting for. Expectorates from all across the globe came to witness the breath taking finals.

The finals began in an astonishing way.A common problem was set for both of them which included both these number.The problem goes like this.

Given a binary string (that is a string consisting of only 0 and 1). They were supposed to perform two types of query on the string.

Type 0: Given two indices l and r.Print the value of the binary string from l to r modulo 3.

Type 1: Given an index l flip the value of that index if and only if the value at that index is 0.

The problem proved to be a really tough one for both of them.Hours passed by but neither of them could solve the problem.
So both of them wants you to solve this problem and then you get the right to choose the best number in the globe.

---------------------------------------------------

My first segment tree question !

Try to decompose the question in the following way. If we know the answer to interval I' and I' belongs to I, how will it help me to solve I ?

So, make t[n] store the value of the string from start to end.

Now, here is how you build t[n] knowing the value of it's right and left children.

t[n] = t[2n]*(2^r) + t[2*n + 1], where r is the number of bits to the right. It is given by (end - mid).

I made a mistake while answering the query. While answering a query, don't do (2^r) for every query.

If the current interval is a subset of the query interval, then return t[n]*2^(r'), where r' = query_end -  by 2end.
This ensures a bigger value than required is not returned.

For example, we want [1-4], After getting the value from 1-3, we shouldn't multiply by 2^2 because that is the size of the right tree.
We need to multiply by 2^1, because only one bit is used from the right subtree.

---------------------------------------------------------------------------------------------

void build(int node, int start, int end)
{
    if(start == end)
    {
        tree[node] = string[start];
        return;
    }

    int mid = (start + end)/2;

    build(2*node, start, mid);
    build(2*node + 1, mid + 1, end);

    int no_of_right_bits = (end - mid);
    int no_of_shifted_positions = power_of_2[no_of_right_bits];

    tree[node] = (no_of_shifted_positions*tree[2*node] + tree[2*node + 1])%3;
}

void update_and_flip(int node, int start, int end, int index)
{
    if(start == end)
    {
        tree[node] = string[index] = 1;
        return;
    }

    int mid = (start + end)/2;

    if(index >= start && index <= mid)
    {
        update_and_flip(2*node, start, mid, index);
    }

    if(index > mid && index <= end)
    {
        update_and_flip(2*node + 1, mid + 1, end, index);
    }

    int no_of_right_bits = (end - mid);
    int no_of_shifted_positions = power_of_2[no_of_right_bits];

    tree[node] = (no_of_shifted_positions*tree[2*node] + tree[2*node + 1])%3;
}

int query(int node, int start, int end, int query_start, int query_end)
{
    if(query_start > end || query_end < start)
        return 0;

    if(query_start <= start && query_end >= end)
    {
        int right_bits = query_end - end;

        return (tree[node]*power_of_2[right_bits])%3;
    }

    int mid = (start + end)/2;

    int left_answer  = query(2*node, start, mid, query_start, query_end);
    int right_answer = query(2*node + 1, mid + 1, end, query_start, query_end);

    return (left_answer + right_answer)%3;
}

int main()
{
    precompute();

    int length;
    scanf("%d", &length);

    for(int i = 1; i <= length; i++)
        scanf("%1d", &string[i]);

    build(1, 1, length);

    int no_of_queries;
    scanf("%d", &no_of_queries);

    while(no_of_queries--)
    {
        int type;
        scanf("%d", &type);

        if(type == 0)
        {
            int left, right;
            scanf("%d %d", &left, &right);

            left++, right++;

            int answer = query(1, 1, length, left, right);

            printf("%d\n", answer);
        }
        else if(type == 1)
        {
            int index;
            scanf("%d", &index);

            index++;
            update_and_flip(1, 1, length, index);
        }
    }

    return 0;
}
